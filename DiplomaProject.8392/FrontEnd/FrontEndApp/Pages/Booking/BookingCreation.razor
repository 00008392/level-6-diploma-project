@using Models.Booking
@using Models.Post 
@inherits BookingBaseComponent

<EditForm Model="_booking" OnValidSubmit="CreateBooking">
    <DataAnnotationsValidator />
    <Error Response="_response"/>
    <div class="aa-single-field">
        <label>Start date <span class="required">*</span> </label>
        <RadzenDatePicker DateRender=@DateRender Class="w-100" TValue="DateTime?" DateFormat="d"
                          @bind-Value="@_booking.StartDate" />
        <div class="font-weight-bold text-danger">
            <ValidationMessage For="() => _booking.StartDate" />
        </div>
    </div>
    <div class="aa-single-field">
        <label>End date <span class="required">*</span> </label>
        <RadzenDatePicker DateRender=@DateRender Class="w-100" TValue="DateTime?" DateFormat="d"
                          @bind-Value="@_booking.EndDate" />
        <div class="font-weight-bold text-danger">
            <ValidationMessage For="() => _booking.EndDate" />
        </div>
    </div>
    <div class="aa-single-field">
        <label>Number of guests <span class="required">*</span></label>
        <InputNumber @bind-Value="_booking.GuestNo" class="form__input" max="20"
                     aria-required="true" />
        <div class="font-weight-bold text-danger">
            <ValidationMessage For="() => _booking.GuestNo" />
        </div>
    </div>
    <div class="aa-single-submit">
        <input disabled="@(!_authState.isAuthenticated)" type="submit" value="Book this accommodation" class="submit__btn submit__btn-primary">
    </div>
</EditForm>

@code {
    //dates for which accommodation is booked
    [Parameter]
    public List<DatesBooked> DatesBooked { get; set; }
    [Parameter]
    public long PostId { get; set; }
    //disabled dates are dates for which accommodation is booked
    private List<DateTime> _datesToDisable = new List<DateTime>();
    private CreateBooking _booking = new CreateBooking();
    private Response _response;
    protected override void OnInitialized()
    {
        //convert date ranges into separate dates
        DatesBooked?.ForEach(x => _datesToDisable.AddRange(GetDatesBetween(x)));
    }
    private async Task CreateBooking()
    {
        //if user is authenticated, try to create booking and redirect to bookings page if success
        if(_authState.isAuthenticated)
        {
            _booking.PostId = PostId;
            _response = await _service.
            CreateBookingAsync(_booking, () =>
            {
                _navManager.NavigateTo("/account/bookings");
            });
        }
    }
    void DateRender(DateRenderEventArgs args)
    {
        //disable all dates for which accommodation is already booked
        args.Disabled = _datesToDisable.Contains(args.Date);
    }

    private List<DateTime> GetDatesBetween(DatesBooked range)
    {
        //get all dates between specified date range
        List<DateTime> allDates = new List<DateTime>();
        for (DateTime date = range.StartDate; date <= range.EndDate; date = date.AddDays(1))
            allDates.Add(date);
        return allDates.ToList();
    }
}
