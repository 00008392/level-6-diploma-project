@page "/posts/{PostId:long}/bookings"
@inherits Components.BookingBaseComponent
@inject IUserService _userService
@inject AppState _appState
<section class="booking__details">
    <div class="container ">
        @if (_response != null)
        {
            <p class="font-weight-bold text-danger">@_response.Message</p>
            @if (_response.Errors != null && _response.Errors.Length != 0)
            {
                @foreach (var error in _response.Errors)
                {
                    <p class="font-weight-bold text-danger">@error.Message</p>
                }
            }

        }
        @if (_bookings == null)
        {
            <p>No bookings to show.</p>
        }
        else if (_bookings.Count == 0)
        {
            <p>Loading bookings...</p>
        }
        else
        {
            <div class="booking__details_content">
                @foreach (var booking in _bookings)
                {
                <div class="booking__item ">
                        <h4 hidden="@(booking.Guest==null)" class="font-weight-bold">
                            Booking by <a href=@($"users/{booking.GuestId}") class="font-italic">
                                @booking.Guest.FirstName @booking.Guest.LastName
                            </a>
                        </h4>
                    <p hidden="@(booking.StartDate==null||booking.EndDate==null)">
                        From <span class="font-weight-bold">
                            @booking.StartDate
                        </span>till <span class="font-weight-bold">
                            @booking.EndDate
                        </span>
                    </p>
                    <p hidden="@(booking.GuestNo==null)"><span class="font-weight-bold">Number of guests: </span> @booking.GuestNo</p>
                    <p>
                        <span class="font-weight-bold">Status: </span> @booking.Status
                        <i class=@("fa "+ (booking.Status == Status.Accepted ? "fa-check-circle item-accepted"
                                       : booking.Status == Status.Rejected || booking.Status == Status.Cancelled ?
                                       "fa-ban item-rejected":"fa-clock-o"))></i>
                    </p>
                    @if (booking.Status == Status.Accepted)
                    {
                        <button @onclick="async ()=> await CancelBooking(booking.Id)" class="submit__btn submit__btn-danger">Cancel</button>
                    }
                    else if (booking.Status == Status.Pending)
                    {
                        <button @onclick="async ()=> await AcceptBooking(booking.Id)" class="submit__btn submit__btn-primary">Accept</button>
                        <button @onclick="async ()=> await RejectBooking(booking.Id)" class="submit__btn submit__btn-danger">Reject</button>
                    }

                </div>
                }   
            </div>
        }

    </div>
</section>
@code {
    [Parameter]
    public long PostId { get; set; }
    private ICollection<BookingResponse> _bookings = new List<BookingResponse>();
    private Response _response;
    private long _userId;
    protected override async Task OnInitializedAsync()
    {
        _appState.SetPageTitle("Bookings for accommodation");
        if (!_authState.isAuthenticated)
        {
            _navManager.NavigateTo("/login");
        }
        else
        {
            var bookings = (await _service.GetBookingsForPostAsync(PostId))?
                .OrderBy(x => x.Status).ToList();
            if(bookings!=null)
            {
                foreach (var booking in bookings)
                {
                    var user = await _userService.GetUserAsync(booking.GuestId);
                    if (user != null)
                    {
                        booking.Guest = new Guest
                        {
                            FirstName = user?.FirstName,
                            LastName = user?.LastName
                        };
                    }
                }
            }
            _bookings = bookings;
        }
    }
    private async Task CancelBooking(long id)
    {
        _response = await _service.CancelBookingAsync(id, () =>
        {
            GetBookingByIdFromList(id).Status = Status.Cancelled;
            StateHasChanged();
        });
    }
    private async Task AcceptBooking(long id)
    {
        _response = await _service.AcceptBookingAsync(id, () =>
        {
            GetBookingByIdFromList(id).Status = Status.Accepted;
            StateHasChanged();
        });
    }
    private async Task RejectBooking(long id)
    {
        _response = await _service.RejectBookingAsync(id, () =>
        {
            GetBookingByIdFromList(id).Status = Status.Rejected;
            StateHasChanged();
        });
    }
    private BookingResponse GetBookingByIdFromList(long id)
    {
        return _bookings.Where(x => x.Id == id).FirstOrDefault();
    }
}
