@page "/posts/{PostId:long}/items"
@inherits Components.CustomBaseComponent
<h3>Modify additional information</h3>
@if (!AuthState.isAuthenticated)
{
    <p>Sign in to modify additional post information</p>
}
else
{

    <div class="product__details">
        <div class="products__content_item details">
            <h2 class="product__details_title">Rules</h2>
            @if (_rules == null)
            {
                <p>Loding...</p>
            }
            else
            {
                @foreach (var rule in _rules)
                {
                    <label class="item__text">
                        @rule.Name
                        <input type="checkbox" @bind-value="rule.IsSelected" disabled="@rule.IsDisabled" />
                        @if (rule.isOther)
                        {
                            <input type="text" class="input w-50" @bind-value="rule.OtherValue" required placeholder="Add your own rule" />
                        }
                    </label>

                }
                <input type="button" class="button w-50" @onclick="async () => await Add
                                              (_rulesUri, _rules, _post.Rules)" value="Add">
            }
            @if (_post.Rules != null&&_post.Rules.Count>0)
            {
        <h2 class="product__details_title">Added rules</h2>
                @foreach (var rule in _post.Rules)
                {
                    <label class="item__text">
                        @(rule.OtherValue??rule.Item)
                        <input type="checkbox" @bind-value="rule.IsSelected"
                               disabled="@rule.IsDisabled" />
                    </label>

                }
                <input type="button" class="button btn-danger w-50" @onclick="async () => await Remove
                                              (_rulesUri, _rules, _post.Rules)" value="Remove">
            }

        </div>
        <div class="products__content_item details">
            <h2 class="product__details_title">Facilities</h2>
            @if (_facilities == null)
            {
                <p>Loding...</p>
            }
            else
            {
                @foreach (var facility in _facilities)
                {
                    <label class="item__text">
                        @facility.Name
                        <input type="checkbox" @bind-value="facility.IsSelected" disabled="@facility.IsDisabled" />
                        @if (facility.isOther)
                        {
                            <input type="text" class="input w-50" @bind-value="facility.OtherValue" required placeholder="Add your own facility" />
                        }
                    </label>

                }
                <input type="button" class="button w-50" @onclick="async () => await Add
                                              (_facilitiesUri, _facilities, _post.Facilities)" value="Add">
            }
            @if (_post.Facilities != null && _post.Facilities.Count > 0)
            {
                <h2 class="product__details_title">Added facilities</h2>
                @foreach (var facility in _post.Facilities)
                {
                    <label class="item__text">
                        @(facility.OtherValue?? facility.Item)
                        <input type="checkbox" @bind-value="facility.IsSelected"
                               disabled="@facility.IsDisabled" />
                    </label>

                }
                <input type="button" class="button btn-dange w-50r" @onclick="async () => await Remove
                                              (_facilitiesUri, _facilities, _post.Facilities)" value="Remove">
            }

        </div>
        <div class="products__content_item details">
            <h2 class="product__details_title">Specificities</h2>
            @if (_specificities == null)
            {
                <p>Loding...</p>
            }
            else
            {
                @foreach (var specificity in _specificities)
                {
                    <label class="item__text">
                        @specificity.Name
                        <input type="checkbox" @bind-value="specificity.IsSelected" disabled="@specificity.IsDisabled" />
                        @if (specificity.isOther)
                        {
                            <input type="text" class="input w-50" @bind-value="specificity.OtherValue" required placeholder="Add your own specificity" />
                        }
                    </label>

                }
                <input type="button" class="button w-50" @onclick="async () => await Add
                                              (_specificitiesUri, _specificities, _post.Specificities)" value="Add">
            }
            @if (_post.Specificities != null && _post.Specificities.Count > 0)
            {
                <h2 class="product__details_title">Added specificities</h2>
                @foreach (var specificity in _post.Specificities)
                {
                    <label class="item__text">
                        @(specificity.OtherValue?? specificity.Item)
                        <input type="checkbox" @bind-value="specificity.IsSelected"
                               disabled="@specificity.IsDisabled" />
                    </label>

                }
                <input type="button" class="button btn-danger w-50" @onclick="async () => await Remove
                                              (_specificitiesUri, _specificities, _post.Specificities)" value="Remove">
            }

        </div>
    </div>

   
}


@code {
    [Parameter]
    public long PostId { get; set; }
    private List<Item> _rules;
    private List<Item> _facilities;
    private List<Item> _specificities;
    private PostInfo _post = new PostInfo();
    private readonly string _rulesUri = "api/post/rules";
    private readonly string _facilitiesUri = "api/post/facilities";
    private readonly string _specificitiesUri = "api/post/specificities";
    protected override async Task OnInitializedAsync()
    {
        var postResponse = await client.GetAsync($"api/posts/{PostId}");
        if (postResponse.IsSuccessStatusCode)
        {
            var postResponseStr = await postResponse.Content.ReadAsStringAsync();
            _post = JsonConvert.DeserializeObject<PostInfo>(postResponseStr);
        }
        _rules = await GetItems(_rulesUri, _post.Rules);
        _facilities = await GetItems(_facilitiesUri, _post.Facilities);
        _specificities = await GetItems(_specificitiesUri, _post.Specificities);
    }
    private async Task<List<Item>> GetItems(string url, List<PostItem> postItems)
    {
        var items = new List<Item>();
        var itemsReponse = await client.GetAsync(url);
        if (itemsReponse.IsSuccessStatusCode)
        {
            var itemsReponseStr = await itemsReponse.Content.ReadAsStringAsync();
            items = JsonConvert.DeserializeObject<List<Item>>(itemsReponseStr);
        }
        if (postItems != null)
        {
            items.Where(x => postItems.Any(y => y.ItemId == x.Id && !x.isOther)).ToList()
            .ForEach(x => x.IsDisabled = true);
        }
        return items;
    }
    private async Task Add(string url, List<Item> items, List<PostItem> postItems)
    {
        var selectedItems = items.Where(x => x.IsSelected).ToList();
        var request = new Models.AddItems
        {
            PostId = PostId,
            ItemsJson = new List<AddItemToPost>()
        };
        selectedItems.ForEach(x => request.ItemsJson.Add(
            new AddItemToPost
            {
                ItemId = x.Id,
                OtherValue = x.OtherValue
            }));
        var response = await client.PostAsJsonAsync<Models.AddItems>($"{url}/add", request);
        if (response.IsSuccessStatusCode)
        {
            selectedItems.ForEach(x => postItems.Add(new PostItem
            {
                ItemId = x.Id,
                Item = x.Name,
                OtherValue = x.OtherValue
            }));
            items.ForEach(x => { x.IsSelected = false; x.OtherValue = null; });
            items.Where(x => request.ItemsJson.Any(y => y.ItemId == x.Id && !x.isOther))
                 .ToList().ForEach(x =>
                 {
                     x.IsSelected = false;
                     x.IsDisabled = true;
                 });
        }
    }
    private async Task Remove(string url, List<Item> items, List<PostItem> postItems)
    {
        var selectedItems = postItems.Where(x => x.IsSelected).Select(x => x.ItemId).ToList();
        var request = new RemoveItems
        {
            PostId = PostId,
            ItemsJson = selectedItems
        };
        var response = await client.PostAsJsonAsync<RemoveItems>($"{url}/remove", request);
        if (response.IsSuccessStatusCode)
        {
            postItems.RemoveAll(x => selectedItems.Any(y => y == x.ItemId));
            items.Where(x => selectedItems.Any(y => y == x.Id && !x.isOther))
                .ToList().ForEach(x =>
                {
                    x.IsDisabled = false;
                    x.IsSelected = false;
                });
        }
    }
}
