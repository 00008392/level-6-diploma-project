@page "/posts/edit/{Id:long?}"

@inherits Components.CustomBaseComponent
@if (!AuthState.isAuthenticated)
{
    <p>Sign in to manage posts</p>
}
else
{

    <div class="container">
        <div class="row justify-content-center">
            <EditForm Model="@_post" OnValidSubmit="@(Id==null?CreatePost:UpdatePost)" class="col-lg-8 form ">

                <h2 class="title">@(Id==null?"Create post":"Edit post")</h2>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <p hidden="@_post.ErrorMessage==null" class="item__text font-weight-bold error">@_post.ErrorMessage</p>
                <label class="item__text" >
                    Accommodation title
                    <InputText class="input"  @bind-Value="@_post.Title" />
                </label>
                <label class="item__text" >
                    Accommodation description
                    <InputText class="input" @bind-Value="@_post.Description" />
                </label>
                <label class="item__text">
                    City:
                    @if (_post.Cities == null)
                    {
                        <span>Loading...</span>
                    }
                    else
                    {
                        <InputSelect class="input" @bind-Value="@_post.CityId" id="cityId">
                            <option value="">Select city</option>
                            @foreach (var city in _post.Cities)
                                    {
                                <option value="@city.Id">@city.Name</option>
                                    }
                        </InputSelect>
                    }
                </label>
                <label class="item__text">
                    Accommodation category:
                    @if (_post.Categories == null)
                    {
                        <span>Loading...</span>
                    }
                    else
                    {
                        <InputSelect class="input" @bind-Value="@_post.CategoryId" id="categoryId">
                            <option value="">Select category</option>
                            @foreach (var category in _post.Categories)
                                    {
                                <option value="@category.Id">@category.Name</option>
                                    }
                        </InputSelect>
                    }
                </label>
                <label class="item__text" >
                    Accommodation address
                    <InputText class="input"  @bind-Value="@_post.Address" />
                </label>
                <label class="item__text" >
                    Reference point
                    <InputText class="input" @bind-Value="@_post.ReferencePoint" />
                </label>
                <label class="item__text" >
                    Contact number
                    <InputText class="input"  @bind-Value="@_post.ContactNumber" />
                </label>
                <label class="item__text" >
                    Number of rooms
                    <InputNumber class="input"  @bind-Value="@_post.RoomsNo" />
                </label>
                <label class="item__text">
                    Number of bathrooms
                    <InputNumber class="input"  @bind-Value="@_post.BathroomsNo" />
                </label>
                <label class="item__text" >
                    Number of beds
                    <InputNumber class="input" @bind-Value="@_post.BedsNo" />
                </label>
                <label class="item__text" >
                    Maximum number of guests
                    <InputNumber class="input"  @bind-Value="@_post.MaxGuestsNo" />
                </label>
                <label class="item__text">
                    Accommodation size (in square meters)
                    <InputNumber class="input"  @bind-Value="@_post.SquareMeters" />
                </label>
                <label class="item__text" >
                    Price (in $)
                    <InputNumber class="input"  @bind-Value="@_post.Price" />
                </label>
                <label class="item__text">
                    Is entire accommodation available for rent?
                    <InputCheckbox @bind-Value="@_post.IsWholeApartment" />
                </label>
                <label class="item__text">Moving in time</label>

                    <RadzenDatePicker TValue="DateTime?" ShowTime="true" TimeOnly="true" DateFormat="HH:mm"
                                      @bind-Value="@_post.MovingInTime"  />

                    <label class="item__text" > Moving out time</label>
                    <RadzenDatePicker TValue="DateTime?" ShowTime="true" TimeOnly="true" DateFormat="HH:mm"
                                      @bind-Value="@_post.MovingOutTime"   />
                <label class="item__text">
                    Additional information about accommodation
                    <InputText class="input" @bind-Value="@_post.AdditionalInfo" />
                </label>
                <input type="submit" class="button" value="Save changes" />
                <input hidden="@(Id==null)" @onclick="DeletePost" class="button btn-danger" value="Delete this post" />
            </EditForm>
        </div>
    </div>
}

@code {
    [Parameter]
    public long? Id { get; set; }
    private long _userId;
    private Models.EditPost _post = new Models.EditPost();
    protected override async Task OnInitializedAsync()
    {
        if (AuthState.isAuthenticated)
        {
            _userId = long.Parse(await storage.GetItemAsync<string>("userId"));
            if (Id != null)
            {
                var postResponse = await client.GetAsync($"api/posts/{Id}");
                if (postResponse.IsSuccessStatusCode)
                {
                    var responseStr = await postResponse.Content.ReadAsStringAsync();

                    _post = JsonConvert.DeserializeObject<Models.EditPost>(responseStr);
                    _post.OwnerId = _post.Owner.Id;
                    _post.CityId = _post.City?.Id;
                    _post.CategoryId = _post.Category?.Id;
                }
            }

            var cityResponse = await client.GetAsync("api/info/cities");
            if (cityResponse.IsSuccessStatusCode)
            {
                var responseStr = await cityResponse.Content.ReadAsStringAsync();

                _post.Cities = JsonConvert.DeserializeObject<List<Item>>(responseStr);
            }
            var categoryResponse = await client.GetAsync("api/info/categories");
            if (categoryResponse.IsSuccessStatusCode)
            {
                var responseStr = await categoryResponse.Content.ReadAsStringAsync();

                _post.Categories = JsonConvert.DeserializeObject<List<Item>>(responseStr);
            }
        }
    }

    private async Task CreatePost()
    {
        _post.OwnerId = _userId;
        var reply = await client.PostAsJsonAsync<Models.EditPost>("api/posts", _post);
        if (reply.IsSuccessStatusCode)
        {
            navManager.NavigateTo("/account/posts");
        }
        else
        {
            _post.ErrorMessage = reply.Content.ReadAsStringAsync().Result;
        }
    }
    private async Task UpdatePost()
    {
        var reply = await client.PutAsJsonAsync<Models.EditPost>($"api/posts/{Id}", _post);
        if (reply.IsSuccessStatusCode)
        {
            navManager.NavigateTo("/account/posts");
        }
        else
        {
            _post.ErrorMessage = reply.Content.ReadAsStringAsync().Result;
        }
    }
    private async Task DeletePost()
    {
        var reply = await client.DeleteAsync($"api/posts/{Id}");
        if (reply.IsSuccessStatusCode)
        {
            navManager.NavigateTo("/account/posts");
        }
    }
}
