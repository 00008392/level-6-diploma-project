@page "/posts"
@using FrontEndApp.Pages.Post.Shared
@using Models.Post
@using Services.Feedback.Contracts
@inject IFeedbackService<PostResponse> _feedbackService
@inherits Components.PostBaseComponent
<section id="aa-latest-property">
    <div class="container">
        <div class="aa-latest-property-area">
            <div class="aa-title">
                <h2>@Title</h2>
                <span></span>
            </div>
            @if (_posts == null)
            {
                <p>No posts to show</p>
            }
            else if (_posts.Count == 0)
            {
        <div>
            <Circle Center="true" />
        </div>

            }
            else
            {
        <div class="aa-latest-properties-content">
            <div class="row">
                @foreach (var post in _pagedPosts)
                {
                    <div class=@($"col-lg-{PostCardSize} col-md-6")>
                        <article class="aa-properties-item">
                            <a href=@($"posts/{post.Id}") class="aa-properties-item-img image__wrapper">
                                <CoverImage PostId="post.Id" />
                            </a>
                            <div hidden="@(post.City==null)" class="aa-tag for-rent">
                                @post.City
                            </div>
                            <div hidden="@(post.AverageRating==null)" class="aa-tag sold-out rating__tag">
                                @post.AverageRating <i class="fa fa-star"></i>
                            </div>
                            <div class="aa-properties-item-content">
                                <div class="aa-properties-info">
                                    <span hidden="@(post.RoomsNo==null||post.RoomsNo==0)">@post.RoomsNo Rooms</span>
                                    <span hidden="@(post.BedsNo==null||post.BedsNo==0)">@post.BedsNo Beds</span>
                                    <span hidden="@(post.BathroomsNo==null||post.BathroomsNo==0)">@post.BathroomsNo Bathrooms</span>
                                    <span hidden="@(post.MaxGuestsNo==null||post.MaxGuestsNo==0)">@post.MaxGuestsNo</span>
                                </div>
                                <div class="aa-properties-about">
                                    <h3 class="post__item_text-overflow" hidden="@(post.Title==null)">@post.Title</h3>
                                    <p class="aa-price">
                                       @(string.IsNullOrWhiteSpace(post.Category)?"No category": post.Category) 
                                    </p>
                                    <p class="post__item_text-overflow">
                                    @(string.IsNullOrWhiteSpace(post.Description)?"No description": post.Description)</p>
                                    <p hidden="@(post.Owner==null)" class="aa-price post__item_text-overflow">
                                        Posted by: <a href=@($"users/{post.Owner?.Id}")>@post.Owner?.FirstName @post.Owner?.LastName</a> on
                                        <span class="font-italic">
                                            @post.DatePublished.ToShortDateString()
                                        </span>
                                    </p>
                                </div>
                                <div class="aa-properties-detial">
                                    <span class="aa-price">
                                        @post.Price $ per night
                                    </span>
                                    <a href=@($"posts/{post.Id}") class="aa-secondary-btn">View Details</a>
                                </div>
                                <div hidden="@(HideActionButtons)" class="aa-properties-detial">
                                    <a href=@($"posts/edit/{post.Id}") class="submit__btn submit__btn-primary">Edit</a>
                                    <a href=@($"/posts/{post.Id}/photos/edit") class="submit__btn submit__btn-primary">Edit photos</a>
                                    <a href=@($"/posts/{post.Id}/bookings") class="submit__btn submit__btn-primary">View bookings</a>
                                </div>
                            </div>
                        </article>
                    </div>
                }

            </div>
            <nav>
                <RadzenPager ShowPagingSummary="true" HorizontalAlign="HorizontalAlign.Right"
                             PagingSummaryFormat="@pagingSummaryFormat" Count="_posts.Count()" PageSize="PageSize" PageNumbersCount="5"
                             PageChanged="PageChanged" />
            </nav>
        </div>
            }
        </div>
    </div>
</section>

@code {
    [Parameter]
    public Filter Filter { get; set; }
    [Parameter]
    public string Title { get; set; }
    //action buttons are only displayed when user is viewing his/her own posts
    [Parameter]
    public bool HideActionButtons { get; set; } = true;
    //size of single post card (in bootstrap columns)
    [Parameter]
    public int PostCardSize { get; set; } = 4;
    private ICollection<PostResponse> _posts = new List<PostResponse>();
    //pagination properties
    [Parameter]
    public int PageSize { get; set; } = 3;
    private string pagingSummaryFormat = "Displaying page {0} of {1} (total {2} posts)";
    private ICollection<PostResponse> _pagedPosts = new List<PostResponse>();

    protected override async Task OnInitializedAsync()
    {
        await LoadPosts(Filter);
    }
    //method called when page is changed
    private void PageChanged(PagerEventArgs args)
    {
        _pagedPosts = GetPagedPosts(args.Skip, args.Top);
    }
    private List<PostResponse> GetPagedPosts(int skip, int take)
    {
        //get posts for selected page
        return _posts?.AsQueryable().Skip(skip).Take(take).ToList();
    }
    private async Task LoadPosts(Filter filter = null)
    {
        //load all posts 
        var posts = await _service.GetPostsAsync(filter);
        if(posts!=null)
        {
            //load average rating for every post
            foreach(var post in posts)
            {
                var rating = await _feedbackService.GetAverageRatingAsync(post.Id);
                post.AverageRating = rating;
            }
        }
        _posts = posts;
        //place first 3 in paged posts
        _pagedPosts = GetPagedPosts(0, PageSize);

    }
    public async Task RefreshComponent()
    {
        //force component to re-render
        await LoadPosts(Filter);
        StateHasChanged();
    }
    public void SetFilter(Filter filter)
    {
        //set new filter values
        Filter = filter;
    }
}
