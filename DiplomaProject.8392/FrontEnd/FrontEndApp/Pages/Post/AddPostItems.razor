@page "/posts/{Id:long}/items/add"
@inherits Components.CustomBaseComponent
<h3>Add additional information about accommodation</h3>
@if (!AuthState.isAuthenticated)
{
    <p>Sign in to modify information</p>
}
else
{
    @if (_addItems != null)
    {
        <p>@_addItems.ErrorMessage</p>
    }
    @foreach (var rule in _rules)
    {
        <div>
            <label>@rule.Name</label>
            <input type="checkbox" @bind-value="rule.IsSelected" disabled="@rule.IsDisabled" />
            @if (rule.isOther)
            {
                <label>Please, specify</label>
                <input type="text" @bind-value="rule.OtherValue" required />
            }
        </div>

    }
    <button class="btn btn-primary" @onclick="async () => await AddItems(_rulesUri, _rules, _post.Rules)">Add rules</button>
    @foreach (var facility in _facilities)
    {
        <div>
            <label>@facility.Name</label>
            <input type="checkbox" @bind-value="facility.IsSelected" disabled="@facility.IsDisabled" />
            @if (facility.isOther)
            {
                <label>Please, specify</label>
                <input type="text" @bind-value="facility.OtherValue" required />
            }
        </div>

    }
    <button class="btn btn-primary" @onclick="async () => await AddItems(_facilitiesUri, _facilities, _post.Facilities)">Add facilities</button>
    @foreach (var specificity in _specificities)
    {
        <div>
            <label>@specificity.Name</label>
            <input type="checkbox" @bind-value="specificity.IsSelected" disabled="@specificity.IsDisabled" />
            @if (specificity.isOther)
            {
                <label>Please, specify</label>
                <input type="text" @bind-value="specificity.OtherValue" required />
            }
        </div>

    }
    <button class="btn btn-primary" @onclick="async () => await AddItems(_specificitiesUri, _specificities, _post.Specificities)">Add specificities</button>

    <p>Rules</p>
    @foreach (var rule in _post.Rules)
    {
        <div>
            <p>@(rule.OtherValue??rule.Item.OtherValue??rule.Item.Name)</p>
        </div>

    }
    <p>Facilities</p>
    @foreach (var facility in _post.Facilities)
    {
        <div>
            <p>@(facility.OtherValue??facility.Item.OtherValue??facility.Item.Name)</p>
        </div>

    }
    <p>Specificities</p>
    @foreach (var specificity in _post.Specificities)
    {
        <div>
            <p>@(specificity.OtherValue??specificity.Item.OtherValue??specificity.Item.Name)</p>
        </div>

    }
    <a href=@($"posts/{Id}/items/remove") class="btn btn-primary d-block">Remove additional post information</a>


}
@code {
    [Parameter]
    public long Id { get; set; }
    private AddItems _addItems;
    private PostInfo _post = new PostInfo()
    {
        Rules = new List<PostItemInfo>(),
        Facilities = new List<PostItemInfo>(),
        Specificities = new List<PostItemInfo>(),
    };
    private List<Item> _rules = new List<Item>();
    private List<Item> _facilities = new List<Item>();
    private List<Item> _specificities = new List<Item>();
    private readonly string _rulesUri = "api/post/rules";
    private readonly string _facilitiesUri = "api/post/facilities";
    private readonly string _specificitiesUri = "api/post/specificities";
    protected override async Task OnInitializedAsync()
    {
        var response = await client.GetAsync($"api/posts/{Id}");
        if (response.IsSuccessStatusCode)
        {
            var responseStr = await response.Content.ReadAsStringAsync();

            _post = JsonConvert.DeserializeObject<PostInfo>(responseStr);
            _rules = await GetItems(_rulesUri);
            _rules.Where(x => _post.Rules.Any(y => y.Item.Id == x.Id && !x.isOther))
                .ToList().ForEach(x => x.IsDisabled = true);
            _facilities = await GetItems(_facilitiesUri);
            _facilities.Where(x => _post.Facilities.Any(y => y.Item.Id == x.Id && !x.isOther))
                  .ToList().ForEach(x => x.IsDisabled = true);
            _specificities = await GetItems(_specificitiesUri);
            _specificities.Where(x => _post.Specificities.Any(y => y.Item.Id == x.Id && !x.isOther))
                  .ToList().ForEach(x => x.IsDisabled = true);
        }


    }
    private async Task<List<Item>> GetItems(string uri)
    {
        var response = await client.GetAsync(uri);
        if (response.IsSuccessStatusCode)
        {
            var responseStr = await response.Content.ReadAsStringAsync();

            return JsonConvert.DeserializeObject<List<Item>>(responseStr);
        }
        return null;
    }
    private async Task AddItems(string uri, List<Item> items, ICollection<PostItemInfo> postItems)
    {
        var itemsSelected = items.Where(x => x.IsSelected).ToList();
        if (itemsSelected.Count > 0)
        {
            _addItems = new AddItems()
            {
                AccommodationId = Id,
                ItemsJson = new List<PostItem>()
            };
            itemsSelected.ForEach(x => _addItems.ItemsJson.Add(new PostItem
            {
                ItemId = x.Id,
                OtherValue = x.OtherValue
            }));
            var reply = await client.PostAsJsonAsync<AddItems>($"{uri}/add", _addItems);
            if (reply.IsSuccessStatusCode)
            {
                itemsSelected.ForEach(x => postItems.Add(new PostItemInfo
                {
                    Item = x,
                    OtherValue = x.OtherValue
                }));
                items.Where(x => _addItems.ItemsJson.Any(y => y.ItemId == x.Id && !x.isOther))
                     .ToList().ForEach(x => {
                         x.IsDisabled = true;
                         x.IsSelected = false;
                     });
            }
            else
            {
                _addItems.ErrorMessage = reply.Content.ReadAsStringAsync().Result;
            }
        }
    }

}
