@page "/posts/edit/{Id:long?}"
@using Services.Post.Contracts
@using Models.Post
@layout FormLayout
@inject IPostRelatedInfoService _infoService
@inject IMapper _mapper
@inherits Components.PostBaseComponent

<EditForm Model="_editPost" OnValidSubmit="@(Id==null?CreatePost:UpdatePost)" class="contactform">
    <DataAnnotationsValidator />
    <Error Response="_response" />
    <div class="aa-single-field">
        <label>Title <span class="required">*</span></label>
        <InputText @bind-Value="_editPost.Title" class="form__input" type="text"
                   aria-required="true" />
        <div class="font-weight-bold text-danger">
            <ValidationMessage For="() => _editPost.Title" />
        </div>
    </div>
    <div class="aa-single-field">
        <label>Description </label>
        <InputTextArea @bind-Value="_editPost.Description" class="form__input" type="text"
                       aria-required="true" />
        <div class="font-weight-bold text-danger">
            <ValidationMessage For="() => _editPost.Description" />
        </div>
    </div>
    <div class="aa-single-field">
        <label>Category </label>
        <InputSelect class="form__input" @bind-Value="@_editPost.CategoryId">
            <option value="">Category</option>
            @foreach (var category in _categories)
            {
                <option value="@category.Id">@category.Name</option>
            }
        </InputSelect>
        <div class="font-weight-bold text-danger">
            <ValidationMessage For="() => _editPost.CategoryId" />
        </div>
    </div>
    <div class="aa-single-field">
        <label>City </label>
        <InputSelect class="form__input" @bind-Value="@_editPost.CityId">
            <option value="">City</option>
            @foreach (var city in _cities)
            {
                <option value="@city.Id">@city.Name</option>
            }
        </InputSelect>
        <div class="font-weight-bold text-danger">
            <ValidationMessage For="() => _editPost.CityId" />
        </div>
    </div>
    <div class="aa-single-field">
        <label>Address <span class="required">*</span></label>
        <InputText @bind-Value="_editPost.Address" class="form__input" type="text"
                   aria-required="true" />
        <div class="font-weight-bold text-danger">
            <ValidationMessage For="() => _editPost.Address" />
        </div>
    </div>
    <div class="aa-single-field">
        <label>Contact number <span class="required">*</span></label>
        <InputText @bind-Value="_editPost.ContactNumber" class="form__input" type="text"
                   aria-required="true" />
        <div class="font-weight-bold text-danger">
            <ValidationMessage For="() => _editPost.ContactNumber" />
        </div>
    </div>
    <div class="aa-single-field">
        <label>Number of rooms <span class="required">*</span></label>
        <InputNumber @bind-Value="_editPost.RoomsNo" class="form__input" max="20"
                     aria-required="true" />
        <div class="font-weight-bold text-danger">
            <ValidationMessage For="() => _editPost.RoomsNo" />
        </div>
    </div>
    <div class="aa-single-field">
        <label>Number of beds <span class="required">*</span></label>
        <InputNumber @bind-Value="_editPost.BedsNo" class="form__input" max="20"
                     aria-required="true" />
        <div class="font-weight-bold text-danger">
            <ValidationMessage For="() => _editPost.BedsNo" />
        </div>
    </div>
    <div class="aa-single-field">
        <label>Number of bathrooms</label>
        <InputNumber @bind-Value="_editPost.BathroomsNo" class="form__input" max="20"
                     aria-required="true" />
        <div class="font-weight-bold text-danger">
            <ValidationMessage For="() => _editPost.BathroomsNo" />
        </div>
    </div>
    <div class="aa-single-field">
        <label>Maximum number of guests <span class="required">*</span></label>
        <InputNumber @bind-Value="_editPost.MaxGuestsNo" class="form__input" max="20"
                     aria-required="true" />
        <div class="font-weight-bold text-danger">
            <ValidationMessage For="() => _editPost.MaxGuestsNo" />
        </div>
    </div>
    <div class="aa-single-field">
        <label>Accommodation size in square meters</label>
        <InputNumber @bind-Value="_editPost.SquareMeters" class="form__input"
                     aria-required="true" />
        <div class="font-weight-bold text-danger">
            <ValidationMessage For="() => _editPost.SquareMeters" />
        </div>
    </div>
    <div class="aa-single-field">
        <label>Price ($ per night) <span class="required">*</span></label>
        <InputNumber @bind-Value="_editPost.Price" class="form__input" step="any" max="5000"
                     aria-required="true" />
        <div class="font-weight-bold text-danger">
            <ValidationMessage For="() => _editPost.Price" />
        </div>
    </div>
    <div class="aa-single-field">
        <label>Is entire accommodation available for rent? </label>
        <RadzenCheckBox @bind-Value=@_editPost.IsWholeApartment TValue="bool" />
        <div class="font-weight-bold text-danger">
            <ValidationMessage For="() => _editPost.IsWholeApartment" />
        </div>
    </div>
    <div class="aa-single-field">
        <label>Moving in time <span class="required">*</span> </label>
        <RadzenDatePicker Class="w-100" TValue="DateTime?" ShowTime="true" TimeOnly="true" DateFormat="HH:mm"
                          @bind-Value="@_editPost.MovingInTime" />
        <div class="font-weight-bold text-danger">
            <ValidationMessage For="() => _editPost.MovingInTime" />
        </div>
    </div>
    <div class="aa-single-field">
        <label>Moving out time <span class="required">*</span> </label>
        <RadzenDatePicker Class="w-100" TValue="DateTime?" ShowTime="true" TimeOnly="true" DateFormat="HH:mm"
                          @bind-Value="@_editPost.MovingOutTime" />
        <div class="font-weight-bold text-danger">
            <ValidationMessage For="() => _editPost.MovingOutTime" />
        </div>
    </div>
    <div class="aa-single-field">
        <label>Select rules applicable to your accommodation </label>
        @*<RadzenDropDown AllowClear="true" AllowFiltering="true" @bind-Value="_selectedRules" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
        Change=@(args => OnChange(args, _editPost.Rules)) Multiple="true" Placeholder="Select..." Data=@_rules TextProperty="Name" ValueProperty="Id"
        Class="w-100" />*@
        <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        @bind-Value=@_selectedRules Multiple="true" Placeholder="Select..." Data=@_rules TextProperty="Name" ValueProperty="Id"
                         Class="w-100" />
    </div>
    <div class="aa-single-field">
        <label>Select facilities applicable to your accommodation </label>
        <RadzenDropDown AllowClear="true" AllowFiltering="true" @bind-Value="_selectedFacilities" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                     Multiple="true" Placeholder="Select..." Data=@_facilities TextProperty="Name" ValueProperty="Id"
                        Class="w-100" />
    </div>
    <div class="aa-single-submit d-flex justify-content-center">
        <input type="submit" value="@(Id==null?"Create post": "Save changes")">
        <button type="button" hidden="@(Id==null)" class="submit__btn submit__btn-danger w-auto"
                @onclick="async ()=> await DeletePost((long)Id)">
            Delete this post
        </button>
    </div>
</EditForm>
@code {
    [Parameter]
    public long? Id { get; set; }
    private Response _response;
    private EditPost _editPost = new EditPost();
    private PostResponse _postInfo = new PostResponse();
    private ICollection<Item> _cities = new List<Item>();
    private ICollection<Item> _categories = new List<Item>();
    private IEnumerable<Item> _rules = new List<Item>();
    private IEnumerable<Item> _facilities = new List<Item>();
    private IEnumerable<long> _selectedFacilities = new List<long>();
    private IEnumerable<long> _selectedRules = new List<long>();
    protected override async Task OnInitializedAsync()
    {
        //check if user is authenticated, if ot, redirect to login page
        if (!_authState.isAuthenticated)
        {
            //_navManager.NavigateTo("/login");
        }
        else
        {
            //if post id parameter is not set, it means that new post is being created
            if (Id == null)
            {
                _appState.SetPageTitle("Create post");
            }
            else
            {
                //if post id parameter is set, it means that existing post is being updated
                _appState.SetPageTitle("Edit post");
                //load post infor and redirect to error page if not found
                var postInfo = await _service.GetPostAsync((long)Id,
                    ()=>_navManager.NavigateTo("/404"));
                //get user id and ensure that user is trying to update his/her own postt
                var userId = await _authService.GetLoggedUserIdAsync();
                if(postInfo?.Owner?.Id!=userId)
                {
                    _navManager.NavigateTo("/login");
                }
                //map post info to post request
                _editPost = _mapper.Map<EditPost>(postInfo);
                //map items to populate dropdown
                _selectedFacilities = _editPost.Facilities;
                _selectedRules = _editPost.Rules;
                var post = new PostModification();
            }
            //load information related to post
            await LoadPostRelatedItems();
        }
    }
    private async Task CreatePost()
    {
        _response = await ManipulatePost(_editPost, _service.CreatePostAsync, ()=>_navManager.NavigateTo("/account"));
    }
    private async Task UpdatePost()
    {
        _response = await ManipulatePost(_editPost, _service.UpdatePostAsync, () => _navManager.NavigateTo($"/posts/{Id}"));
    }
    private async Task<Response> ManipulatePost(EditPost post, Func<EditPost,
        Action, Action, Task<Response>> action, Action onSuccessAction)
    {
        //get items from dropdown
        _editPost.Rules = _selectedRules.ToList();
        _editPost.Facilities = _selectedFacilities.ToList();
        //try either to create or to update post and redirect to account page in case of success
        return await action(post, onSuccessAction, null);
    }
    private async Task LoadPostRelatedItems()
    {
        //load post related info
        var cityTask = _infoService.GetCitiesAsync();
        var categoryTask = _infoService.GetCategoriesAsync();
        var rulesTask = _infoService.GetRulesAsync();
        var facilitiesTask = _infoService.GetFacilitiesAsync();
        await Task.WhenAll(cityTask, categoryTask,
            rulesTask, facilitiesTask);
        _cities = await cityTask;
        _categories = await categoryTask;
        _rules = await rulesTask;
        _facilities = await facilitiesTask;
    }
    private async Task DeletePost(long id)
    {
        //try to delete post and navigate to account page in case of success
        _response = await _service.DeletePostAsync(id, ()=>_navManager.NavigateTo("/account"));
    }
}
