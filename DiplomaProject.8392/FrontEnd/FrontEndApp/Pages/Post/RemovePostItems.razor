@page "/posts/{Id:long}/items/remove"
@inherits Components.CustomBaseComponent
<h3>Remove additional information about accommodation</h3>
@if (!AuthState.isAuthenticated)
{
    <p>Sign in to modify information</p>
}
else
{

    <p>Rules</p>
    @foreach (var rule in _post.Rules)
    {
<div>
    <label>@(rule.OtherValue??rule.Item.Name)</label>
    <input type="checkbox" @bind-value="rule.IsSelected" disabled="@rule.IsDisabled"/>
</div>

    }
    <button class="btn btn-danger" @onclick="async ()=> await RemoveItems(_rulesUri, _post.Rules)">Remove rules</button>
    <p>Facilities</p>
    @foreach (var facility in _post.Facilities)
    {
<div>
    <label>@(facility.OtherValue??facility.Item.Name)</label>
    <input type="checkbox" @bind-value="facility.IsSelected" disabled="@facility.IsDisabled"/>>
</div>

    }
    <button class="btn btn-danger" @onclick="async ()=> await RemoveItems(_facilitiesUri, _post.Facilities)">>Remove facilities</button>
    <p>Specificities</p>
    @foreach (var specificity in _post.Specificities)
    {
<div>
    <label>@(specificity.OtherValue??specificity.Item.Name)</label>
    <input type="checkbox" @bind-value="specificity.IsSelected" disabled="@specificity.IsDisabled"/>
</div>

    }
    <button class="btn btn-danger" @onclick="async ()=> await RemoveItems(_specificitiesUri, _post.Specificities)">>Remove specificities</button>
}

@code {
    [Parameter]
    public long Id { get; set; }
    private RemoveItems _removeItems;
    private PostInfo _post = new PostInfo()
    {
        Rules = new List<PostItemInfo>(),
        Facilities = new List<PostItemInfo>(),
        Specificities = new List<PostItemInfo>(),
    };
    private readonly string _rulesUri = "api/post/rules";
    private readonly string _facilitiesUri = "api/post/facilities";
    private readonly string _specificitiesUri = "api/post/specificities";
    protected override async Task OnInitializedAsync()
    {
        var response = await client.GetAsync($"api/posts/{Id}");
        if (response.IsSuccessStatusCode)
        {
            var responseStr = await response.Content.ReadAsStringAsync();

            _post = JsonConvert.DeserializeObject<PostInfo>(responseStr);

        }

    }

    private async Task RemoveItems(string uri, ICollection<PostItemInfo> postItems)
    {
        var itemsSelected = postItems.Where(x => x.IsSelected).ToList();
        if (itemsSelected.Count > 0)
        {
            _removeItems = new RemoveItems()
            {
                AccommodationId = Id,
                ItemsJson = new List<long>()
            };
            itemsSelected.ForEach(x => _removeItems.ItemsJson.Add(x.Item.Id));
            var reply = await client.PostAsJsonAsync<RemoveItems>($"{uri}/remove", _removeItems);
            if (reply.IsSuccessStatusCode)
            {
                itemsSelected.ForEach(x => postItems.Where(y=>y==x).ToList()
                                                    .ForEach(i=> {
                                                        i.IsDisabled = true;
                                                        i.IsSelected = false;
                                                    }));
            }
            else
            {
                _removeItems.ErrorMessage = reply.Content.ReadAsStringAsync().Result;
            }
        }
    }
}
