@page "/posts/{PostId:long}/photos/edit"
@using Services.Post.Contracts
@using Models.Post
@inherits CustomBaseComponent
@inject IPhotoService _service
@inject IPostService _postService
<section class="photo__editing">
   
    <div class="container">
        <div class="row justify-content-center">
            <div class="aa-title">
                <h2>Edit photos of your accommodation</h2>
                <span></span>
            </div>
            <p class="text-center photo__editing_info">To show guests how your accommodation looks like, add several photos and cover photo.</p>
            <p class="text-center photo__editing_info">
                Please note that allowed file formats are JPG, JPEG and PNG, maximum file size is
                1MB and maximum number of photos (excluding cover photo) attached to post is 15.
            </p>
        </div>
        <div class="row flex-column">
            <div>
                 <Error Response="_response"/>
            </div>
            <EditForm class="multiple_photo__editing_form" Model="_newPhotos" OnValidSubmit="UploadPhotos">
                <DataAnnotationsValidator />
                <div class="d-flex">
                    <InputFile id="photosInput" class="input__file" multiple="true" accept=".jpg,.jpeg,.png" OnChange="args=>SelectFile(args, true)" />
                    <label for="photosInput" class="submit__btn submit__btn-secondary">
                        Add new photos
                    </label>
                    <input hidden="@(_newPhotos.Files==null||_newPhotos.Files.Count==0)" multiple class="submit__btn submit__btn-primary" type="submit" value="Upload" />
                </div>
                <div class="font-weight-bold text-danger error__message">
                    <ValidationMessage For="()=>_newPhotos.Files" />
                </div>
            </EditForm>
        </div>
        <div class="row photo__editing_content">
            <div class="photo__editing_item photo__editing_cover">
                <div class="image__wrapper">
                    @if (_existingCoverPhoto == null)
                    {
                        <img class="image" src="img/no_img.jpg"
                             alt="img">
                    }
                    else if (string.IsNullOrWhiteSpace(_existingCoverPhoto.FileContentStr))
                    {
                        <div class="preloader_image_wrapper">
                            <Circle Center="true" />
                        </div>
                    }
                    else
                    {
                        <img class="image" src=@(_existingCoverPhoto==null?"img/no_img.jpg"
                                         : $"{_existingCoverPhoto.FileContentStr}") alt="img">
                    }
                    <EditForm @ref="_coverPhotoForm" class="photo__editing_form" Model="_newCoverPhoto" OnValidSubmit="UploadCoverPhoto">
                        <DataAnnotationsValidator />
                        <div class="photo__editing_controls d-flex">
                            <InputFile id="coverPhotoInput" class="input__file"
                                       accept=".jpg,.jpeg,.png" OnChange="args=>SelectFile(args)" />
                            <label for="coverPhotoInput" class="submit__btn submit__btn-secondary">
                                Change cover photo
                            </label>
                            <input hidden="@(_newCoverPhoto.File==null)" class="submit__btn submit__btn-primary" type="submit" value="Upload" />
                        </div>
                        <button type="button" hidden="@(_existingCoverPhoto==null)" @onclick="async()=>await DeletePhoto(_existingCoverPhoto?.Id??0)"
                                class="submit__btn submit__btn-danger">
                            Delete cover photo
                        </button>
                        <div hidden="@(!_coverPhotoForm.EditContext?.GetValidationMessages()?.Any())" class="font-weight-bold text-danger error__message">
                            <ValidationMessage For="() => _newCoverPhoto.File" />
                        </div>
                    </EditForm>
                </div>
            </div>
            @if (_existingPhotos != null)
            {
                @foreach (var photo in _existingPhotos)
                {
                    <div class="photo__editing_item">
                        <div class="image__wrapper">
                            <img class="image" src=@($"{photo.FileContentStr}") alt="img">
                            <button @onclick="async ()=>await DeletePhoto(photo.Id)" class="submit__btn submit__btn-danger photo__editing_btn">
                                Delete this photo
                            </button>
                        </div>
                    </div>

                }
            }
        </div>

    </div>
</section>
@code {     
    [Parameter]
    public long PostId { get; set; }
    private Response _response;
    private ICollection<Photo> _existingPhotos = new List<Photo>();
    private Photo _existingCoverPhoto = new Photo();
    private UploadSinglePhoto _newCoverPhoto = new UploadSinglePhoto();
    private UploadMultiplePhotos _newPhotos = new UploadMultiplePhotos();
    private EditForm _coverPhotoForm = new EditForm();

    protected override async Task OnInitializedAsync()
    {
        //if user is not authenticated, redirect to login page
        if (!_authState.isAuthenticated)
        {
            _navManager.NavigateTo("/login");
        }
        else
        {
            //if authenticated, get id of user
            var userId = await _authService.GetLoggedUserIdAsync();
            //check that logged user owns a post, photo for which are modified
            //if not, redirect to login
            var post = await _postService.GetPostAsync(PostId, () => _navManager.NavigateTo("/404"));
            if (post?.Owner?.Id != userId)
            {
                _navManager.NavigateTo("/login");
            }
        }
        _appState.SetPageTitle("Edit photos");
        //load all photos of post
        _existingPhotos = await _service.GetPhotosAsync(PostId);
        _existingCoverPhoto = await _service.GetCoverPhotoAsync(PostId);
    }
    //method called when user selects file
    private void SelectFile(InputFileChangeEventArgs args, bool? multiple=false)
    {
        //assign files to model
        if(multiple==true)
        {
            _newPhotos.Files = args.GetMultipleFiles()?.ToList();
        } else
        {
            _newCoverPhoto.File = args.File;
        }
    }
    private async Task UploadCoverPhoto()
    {
        //try to upload cover photo, if success, load newly added cover photo and re-render component
        _response = await _service.AddCoverPhotoAsync(_newCoverPhoto.File, PostId,
             async ()=> {
                 _newCoverPhoto = new UploadSinglePhoto();
                 _existingCoverPhoto = await _service.GetCoverPhotoAsync(PostId);
                 StateHasChanged();
             });
    }
    private async Task UploadPhotos()
    {
        //try to upload cover photos, if success, load newly added photos and re-render component
        _response = await _service.AddPhotosAsync(_newPhotos.Files, PostId,
        async ()=> { _existingPhotos = await _service.GetPhotosAsync(PostId);
            _newPhotos = new UploadMultiplePhotos();
            StateHasChanged(); });

    }
    private async Task DeletePhoto(long id)
    {
        //try to delete photo, if success, remove this photo from list of photos,
        //remove cover photo if deleted photo is cover
        //and refresh component
        _response = await _service.RemovePhotoAsync(id, ()=> {
            var photoList = _existingPhotos.ToList();
            photoList.RemoveAll(x => x.Id == id);
            _existingPhotos = photoList;
            if(id==_existingCoverPhoto?.Id)
            {
                _existingCoverPhoto = null;
            }
            StateHasChanged();
        });

    }
}
