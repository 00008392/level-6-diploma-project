@page "/user/feedbacks/create/{UserId:long}"
@page "/post/feedbacks/create/{PostId:long}"

@inherits Components.CustomBaseComponent

@if (!AuthState.isAuthenticated)
{
    <h3>Sign in to leave feedback</h3>
}
else
{
    <p>@_feedback.ErrorMessage</p>
    <h3>Leave feedback</h3>
    <p>@_successMessage</p>
    <EditForm Model="_feedback" OnValidSubmit="CreateFeedback">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <label for="rating">Rating</label>
        <RadzenRating @bind-Value="_feedback.Rating" id="rating" />
        <label for="feedback">Feedback text</label>
        <InputText @bind-Value="_feedback.Message" id="feedback" />
        <button class="btn btn-primary" type="submit">Leave feedback</button>
    </EditForm>
}


@code {
    [Parameter]
    public long UserId { get; set; }
    [Parameter]
    public long PostId { get; set; }
    private long _feedbackOwnerId;
    private string _successMessage;
    private CreateFeedback _feedback = new CreateFeedback();
    private string _feedbackUri;
    protected override async Task OnInitializedAsync()
    {
        if(AuthState.isAuthenticated)
        {
            _feedbackOwnerId = long.Parse(await storage.GetItemAsync<string>("userId"));
            _feedback.UserId = _feedbackOwnerId;
        }
        if(UserId!=0)
        {
            _feedbackUri = "api/feedbacks/user";
            _feedback.ItemId = UserId;
        }
        else if(PostId!=0)
        {
            _feedbackUri = "api/feedbacks/accommodation";
            _feedback.ItemId = PostId;
        }
    }
    private async Task CreateFeedback()
    {
        var reply = await client.PostAsJsonAsync<CreateFeedback>(_feedbackUri, _feedback);
        if (reply.IsSuccessStatusCode)
        {
            _feedback = new CreateFeedback();
            _successMessage = "Feedback is saved";
        }
        else
        {
            _feedback.ErrorMessage = reply.Content.ReadAsStringAsync().Result;
        }
    }
}
