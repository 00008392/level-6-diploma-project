@page "/account"
@using FrontEndApp.States
@inject AppState _appState
@inject IPostService _postService
@inherits Components.UserBaseComponent
@if (_userId == 0)
{
    <p>Loading...</p>
}
else
{
    <section class="account__details">
        <div class="container ">
            <div class="row d-flex justify-content-center">
                <div class="account__details_left col-md-4">
                   <User Id="_userId" HideActionButtons="true"/>
                </div>
                <div class="account__details_right col-md-4">
                    <h2 class="account__details_title">Account actions</h2>
                    <a class="submit__btn submit__btn-primary" href="account/edit">Edit account</a>
                    <a class="submit__btn submit__btn-primary" href="account/password">Reset password</a>
                    <a class="submit__btn submit__btn-primary" href="posts/edit">Create post</a>
                    <a class="submit__btn submit__btn-primary" href="account/bookings">View bookings</a>
                    <button @onclick="LogOut" class="submit__btn submit__btn-secondary">Log out</button>
                    <button @onclick="DeleteUser" class="submit__btn submit__btn-danger">Delete account</button>
                </div>
            </div>
        </div>
       <Posts Filter="new Filter { Owner = _userId}" Title="My posts" HideActionButtons="false" />
    </section>

}


@code {
    private long _userId;
    private Response _response;
    protected override async Task OnInitializedAsync()
    {
        _appState.SetPageTitle("Account details");
        if (!_authState.isAuthenticated)
        {
            _navManager.NavigateTo("/login");
        }
        else
        {
            _userId = (long)(await _authService.GetLoggedUserId());
        }

    }
    private async Task DeleteUser()
    {
        _response = await _service.DeleteAccountAsync(async () =>
        {
            await LogOut();
        });
    }
    private async Task LogOut()
    {
        await _authService.LogOut(() => _navManager.NavigateTo("/"));
    }

}
