@page "/account"

@inherits Components.CustomBaseComponent


@if (AuthState.isAuthenticated)
{
    if (_id == 0)
    {
        <p>Loading...</p>
    }
    else
    {
        <User Id="_id" DisplayFeedbackForm="false"/>
        <NavLink class="btn btn-primary" href="@($"account/edit")">
            <span class="oi oi-plus" aria-hidden="true"></span> Edit account
        </NavLink>
        <button type="submit" class="btn btn-danger" @onclick="DeleteUser">Delete account</button>
        <NavLink class="btn btn-primary" href="@($"account/password")">
            <span class="oi oi-plus" aria-hidden="true"></span> Change password
        </NavLink>
        <NavLink class="btn btn-primary" href="@($"account/posts")">
            <span class="oi oi-pencil" aria-hidden="true"></span> View my posts
        </NavLink>
        <button type="submit" class="btn btn-danger" @onclick="LogOut">Sign out</button>
    }

}
else
{
    <p>
        <NavLink class="btn btn-primary" href="@($"registration")">
            <span class="oi oi-plus" aria-hidden="true"></span> Sign up
        </NavLink> or
        <NavLink class="btn btn-primary" href="@($"login")">
            <span class="oi oi-account-login" aria-hidden="true"></span> Sign in
        </NavLink>
    </p>

}



@code {
    private UserInfo _user = new UserInfo();
    private long _id;
    protected override async Task OnInitializedAsync()
    {
        if (AuthState.isAuthenticated)
        {
            _id = long.Parse(await storage.GetItemAsync<string>("userId"));

        }
    }
    private async Task DeleteUser()
    {
        var reply = await client.DeleteAsync($"api/users/account");
        if (reply.IsSuccessStatusCode)
        {
            await authService.LogOut();
            navManager.NavigateTo("/users");
        }

    }
    private async Task LogOut()
    {
        await authService.LogOut();
    }

}
