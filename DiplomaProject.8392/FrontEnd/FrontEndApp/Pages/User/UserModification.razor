@page "/account/edit"

@inherits Components.CustomBaseComponent

@if (AuthState.isAuthenticated)
{
    
    <div class="container">
        <div class="row justify-content-center">
            <EditForm Model="@_editUser" OnValidSubmit="@UpdateUser" class="col-lg-8 form">
                <h2 class="title">Edit account</h2>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <p hidden="@(_editUser.ErrorMessage==null)" class="item__text font-weight-bold error">@_editUser.ErrorMessage</p>
                <label class="item__text">
                    First name
                    <InputText @bind-Value="@_editUser.FirstName" class="input" />
                </label>
                <label class="item__text">
                    Last name
                    <InputText @bind-Value="@_editUser.LastName" class="input" />
                </label>
                <label class="item__text">
                    Email
                    <InputText @bind-Value="@_editUser.Email" class="input" />
                </label>
                <label class="item__text">
                    Birthday:
                    <InputDate @bind-Value="@_editUser.DateOfBirth" class="input" type="date" />
                </label>
                <label class="item__text">
                    Gender:
                    <InputSelect @bind-Value="@_editUser.Gender" class="input">
                        @foreach (var gender in Enum.GetValues(typeof(Gender)))
                            {
                            <option value="@gender">@gender</option>
                            }
                    </InputSelect>
                </label>
                <label class="item__text">
                    Phone number
                    <InputText @bind-Value="@_editUser.PhoneNumber" class="input" />
                </label>
                <label class="item__text">
                    Address
                    <InputText @bind-Value="@_editUser.Address" class="input" />
                </label>
                <label class="item__text">
                    Country:
                    @if (_editUser.CountryList == null)
                    {
                        <span>Loading...</span>
                    }
                    else
                    {
                        <InputSelect @bind-Value="@_editUser.CountryId" class="input">
                            <option value="">Choose country</option>
                            @foreach (var country in _editUser.CountryList)
                                    {
                                <option value="@country.Id">@country.Name</option>
                                    }
                        </InputSelect>
                    }
                </label>
                <label class="item__text">
                    Additional information
                    <InputText @bind-Value="@_editUser.UserInfo" class="input" />
                </label>
                <input type="submit" class="button" value="Save changes" />
            </EditForm>
        </div>
    </div>
}
else
{
    <p>Sign in to modify account</p>
}


@code {

    private EditUser _editUser = new EditUser();

    protected override async Task OnInitializedAsync()
    {
        if (AuthState.isAuthenticated)
        {
            var id = long.Parse(await storage.GetItemAsync<string>("userId"));
            var userResponse = await client.GetAsync($"api/users/{id}");
            if (userResponse.IsSuccessStatusCode)
            {
                var responseStr = await userResponse.Content.ReadAsStringAsync();

                _editUser = JsonConvert.DeserializeObject<EditUser>(responseStr);
                _editUser.CountryId = _editUser.Country?.Id;
            }
            var countryResponse = await client.GetAsync("api/info/countries");
            if (countryResponse.IsSuccessStatusCode)
            {
                var responseStr = await countryResponse.Content.ReadAsStringAsync();

                _editUser.CountryList = JsonConvert.DeserializeObject<List<Country>>(responseStr);
            }
        }
    }
    private async Task UpdateUser()
    {
        var reply = await client.PutAsJsonAsync<EditUser>($"api/users/account", _editUser);
        if (reply.IsSuccessStatusCode)
        {
            navManager.NavigateTo("/account");
        }
        else
        {
            _editUser.ErrorMessage = reply.Content.ReadAsStringAsync().Result;
        }
    }

}
