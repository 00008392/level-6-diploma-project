@page "/account/edit"
@using Services.User.Contracts
@using Models.User
@layout FormLayout
@inherits Components.UserBaseComponent
@inject IUserRelatedInfoService _infoService
@inject IMapper _mapper
<EditForm Model="_updateUser" OnValidSubmit="@UpdateUser" class="contactform">
    <DataAnnotationsValidator />
    <Error Response="_response" />
    <div class="aa-single-field">
        <label>First name <span class="required">*</span></label>
        <InputText @bind-Value="_updateUser.FirstName" class="form__input" type="text"
                   aria-required="true" />
        <div class="font-weight-bold text-danger">
            <ValidationMessage For="() => _updateUser.FirstName" />
        </div>
    </div>
    <div class="aa-single-field">
        <label>Last name <span class="required">*</span></label>
        <InputText @bind-Value="_updateUser.LastName" class="form__input" type="text"
                   aria-required="true" />
        <div class="font-weight-bold text-danger">
            <ValidationMessage For="() => _updateUser.LastName" />
        </div>
    </div>
    <div class="aa-single-field">
        <label>Email <span class="required">*</span></label>
        <InputText @bind-Value="_updateUser.Email" class="form__input" type="email"
                   aria-required="true" />
        <div class="font-weight-bold text-danger">
            <ValidationMessage For="() => _updateUser.Email" />
        </div>
    </div>
    <div class="aa-single-field">
        <label>Date of birth <span class="required">*</span></label>
        <RadzenDatePicker TValue="DateTime?" Class="w-100" DateFormat="d"
                          @bind-Value="_updateUser.DateOfBirth" />
        <div class="font-weight-bold text-danger">
            <ValidationMessage For="() => _updateUser.DateOfBirth" />
        </div>
    </div>
    <div class="aa-single-field">
        <label>Gender <span class="required">*</span></label>
        <InputSelect class="form__input" @bind-Value="@_updateUser.Gender">
            <option value="">Gender</option>
            @foreach (var gender in Enum.GetValues(typeof(Gender)))
            {
                <option value="@gender">@gender</option>
            }
        </InputSelect>
        <div class="font-weight-bold text-danger">
            <ValidationMessage For="() => _updateUser.Gender" />
        </div>
    </div>
    <div class="aa-single-field">
        <label>Country <span class="required">*</span></label>
        <InputSelect class="form__input" @bind-Value="_updateUser.CountryId">
            @if (_countries == null)
            {
                <option value="">No countries found</option>
            }
            else if (_countries.Count == 0)
            {
                <option value="">Loading countries...</option>
            }
            else
            {
                <option value="">Country</option>
                @foreach (var country in _countries)
                {
                    <option value="@country.Id">@country.Name</option>
                }
            }
        </InputSelect>
        <div class="font-weight-bold text-danger">
            <ValidationMessage For="() => _updateUser.CountryId" />
        </div>
    </div>
    <div class="aa-single-field">
        <label>Phone number </label>
        <InputText @bind-Value="_updateUser.PhoneNumber" type="text" class="form__input" />
        <div class="font-weight-bold text-danger">
            <ValidationMessage For="() => _updateUser.PhoneNumber" />
        </div>
    </div>
    <div class="aa-single-field">
        <label>Additional information about you </label>
        <InputTextArea @bind-Value="_updateUser.UserInfo" type="text" class="form__input" />
        <div class="font-weight-bold text-danger">
            <ValidationMessage For="() => _updateUser.UserInfo" />
        </div>
    </div>
    <div class="aa-single-submit">
        <input type="submit" value="Update Account">
    </div>
</EditForm>

@code {

    private UpdateUser _updateUser = new UpdateUser();
    private Response _response;
    private ICollection<Country> _countries = new List<Country>();

    protected override async Task OnInitializedAsync()
    {
        _appState.SetPageTitle("Update account information");
        //if user is not authenticated, redirect to login page
        if (!_authState.isAuthenticated)
        {
            _navManager.NavigateTo("/login");
        }
        else
        {
            //if authenticated, get user id
            var userId = (long)(await _authService.GetLoggedUserIdAsync());
            //load information about user that is being updated
            var userInfo = await _service.GetUserAsync(userId, () => _navManager.NavigateTo("/404"));
            //map it to update request
            _updateUser = _mapper.Map<UpdateUser>(userInfo);
            //load all countries
            _countries = await _infoService.GetCountriesAsync();
        }
    }
    private async Task UpdateUser()
    {
        //try to update and redirect to account page in case of success
        _response = await _service.
            UpdateAccountAsync(_updateUser, () => _navManager.NavigateTo("/account"));
    }

}
