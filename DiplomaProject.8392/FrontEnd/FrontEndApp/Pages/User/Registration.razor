@page "/registration"

@inherits Components.CustomBaseComponent

@if (AuthState.isAuthenticated)
{
    <h2 class="title">You are already signed in</h2>
}
else
{
    <div class="container">
        <div class="row justify-content-center">
            <EditForm Model="@_newUser" OnValidSubmit="@CreateUser" class="col-lg-8 form">
                <h2 class="title">Registration</h2>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <p hidden="@(_newUser.ErrorMessage==null)" class="item__text font-weight-bold error">@_newUser.ErrorMessage</p>
                <label class="item__text">
                    First name
                    <InputText @bind-Value="@_newUser.FirstName" class="input"  />
                </label>
                <label class="item__text">
                    Last name
                    <InputText @bind-Value="@_newUser.LastName" class="input"  />
                </label>
                <label class="item__text">
                    Email
                    <InputText @bind-Value="@_newUser.Email" class="input" />
                </label>
                <label class="item__text">
                    Birthday:
                    <InputDate min="1900-01-01" @bind-Value="@_newUser.DateOfBirth" class="input" type="date" />
                </label>
                <label class="item__text">
                    Gender:
                    <InputSelect @bind-Value="@_newUser.Gender" class="input">
                        @foreach (var gender in Enum.GetValues(typeof(Gender)))
                            {
                            <option value="@gender">@gender</option>
                            }
                    </InputSelect>
                </label>
                <label class="item__text">
                    Password
                    <InputText @bind-Value="@_newUser.Password" class="input"  type="password" />
                </label>
                <input type="submit" class="button" value="Sign up" />
            </EditForm>
        </div>
    </div>
}


@code {

    private CreateUser _newUser = new CreateUser();
    private async Task CreateUser()
    {
        _newUser.Role = 0;
        var reply = await client.PostAsJsonAsync<CreateUser>("api/users", _newUser);
        if (reply.IsSuccessStatusCode)
        {
            var login = new Models.Login
            {
                Email = _newUser.Email,
                Password = _newUser.Password
            };
            await authService.LogIn(login);
            navManager.NavigateTo("/account");
        }
        else
        {
            _newUser.ErrorMessage = reply.Content.ReadAsStringAsync().Result;
        }
    }
}
