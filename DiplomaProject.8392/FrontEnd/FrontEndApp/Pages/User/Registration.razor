@page "/registration"
@using Services.User.Contracts
@using Models.User
@layout FormLayout
@inject IUserRelatedInfoService _infoService
@inherits Components.UserBaseComponent
<EditForm Model="_newUser" OnValidSubmit="@Register" class="contactform">
    <DataAnnotationsValidator />
    <Error Response="_response" />
<div class="aa-single-field">
    <label>First name <span class="required">*</span></label>
    <InputText @bind-Value="_newUser.FirstName" class="form__input" type="text"
               aria-required="true" />
    <div class="font-weight-bold text-danger">
        <ValidationMessage For="() => _newUser.FirstName" />
    </div>
</div>
<div class="aa-single-field">
    <label>Last name <span class="required">*</span></label>
    <InputText @bind-Value="_newUser.LastName" class="form__input" type="text"
               aria-required="true" />
    <div class="font-weight-bold text-danger">
        <ValidationMessage For="() => _newUser.LastName" />
    </div>
</div>
<div class="aa-single-field">
    <label>Email <span class="required">*</span></label>
    <InputText @bind-Value="_newUser.Email" class="form__input" type="email"
               aria-required="true" name="email" />
    <div class="font-weight-bold text-danger">
        <ValidationMessage For="() => _newUser.Email" />
    </div>
</div>
<div class="aa-single-field">
    <label>Date of birth <span class="required">*</span></label>
    <RadzenDatePicker TValue="DateTime?" Class="w-100" DateFormat="d"
                      @bind-Value="_newUser.DateOfBirth" />
    <div class="font-weight-bold text-danger">
        <ValidationMessage For="() => _newUser.DateOfBirth" />
    </div>
</div>
<div class="aa-single-field">
    <label>Gender <span class="required">*</span></label>
    <InputSelect class="form__input" @bind-Value="@_newUser.Gender">
        <option value="">Gender</option>
        @foreach (var gender in Enum.GetValues(typeof(Gender)))
        {
            <option value="@gender">@gender</option>
        }
    </InputSelect>
    <div class="font-weight-bold text-danger">
        <ValidationMessage For="() => _newUser.Gender" />
    </div>
</div>
<div class="aa-single-field">
    <label>Country <span class="required">*</span></label>
    <InputSelect class="form__input" @bind-Value="_newUser.CountryId">
        @if (_countries == null)
        {
            <option value="">No countries found</option>
        }
        else if (_countries.Count == 0)
        {
            <option value="">Loading countries...</option>
        }
        else
        {
            <option value="">Country</option>
            @foreach (var country in _countries)
            {
                <option value="@country.Id">@country.Name</option>
            }
        }
    </InputSelect>
    <div class="font-weight-bold text-danger">
        <ValidationMessage For="() => _newUser.CountryId" />
    </div>
</div>
<div class="aa-single-field">
    <label>Password <span class="required">*</span></label>
    <InputText class="form__input" type="password" @bind-Value="_newUser.Password" />
    <div class="font-weight-bold text-danger">
        <ValidationMessage For="() => _newUser.Password" />
    </div>
</div>
<div class="aa-single-field">
    <label for="confirm-password">Confirm Password <span class="required">*</span></label>
    <InputText class="form__input" type="password" @bind-Value="_newUser.ConfirmPassword" />
    <div class="font-weight-bold text-danger">
        <ValidationMessage For="() => _newUser.ConfirmPassword" />
    </div>
</div>
    <div class="aa-single-submit">
        <input type="submit" value="Create Account">
    </div>
</EditForm>

@code {

    private RegisterUser _newUser = new RegisterUser();
    private Response _response;
    private ICollection<Country> _countries = new List<Country>();
    protected override async Task OnInitializedAsync()
    {
        _appState.SetPageTitle("Create your account and Stay with us");
        //if user is already authenticated, navigate to account page
        @if (_authState.isAuthenticated)
        {
            _navManager.NavigateTo("/account");
        }
         //load all countries
        _countries = await _infoService.GetCountriesAsync();
    }
    private async Task Register()
    {
        //try ti register, if success, login and navigate to account page
        _response = await _service.
            RegisterAccountAsync(_newUser, async () =>
            {
                var login = new LoginRequest
                {
                    Email = _newUser.Email,
                    Password = _newUser.Password
                };
                await _authService.LogInAsync(login);
                _navManager.NavigateTo("/account");
            });
    }

}
