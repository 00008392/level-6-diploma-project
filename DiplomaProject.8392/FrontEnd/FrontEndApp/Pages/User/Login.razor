@page "/login"
@layout UserFormLayout
@inject AppState _appState
@inherits Components.UserBaseComponent
<EditForm OnValidSubmit="@LogIn" Model="_login" class="contactform">
    <DataAnnotationsValidator />
    <p class="font-weight-bold text-danger">@_error</p>
    <div class="aa-single-field">
        <label>Email <span class="required">*</span></label>
        <InputText class="form__input" @bind-Value="_login.Email" type="email"
                   aria-required="true" name="email" />
        <div class="font-weight-bold text-danger">
            <ValidationMessage For="() => _login.Email" />
        </div>

    </div>
    <div class="aa-single-field">
        <label>Password <span class="required">*</span></label>
        <InputText class="form__input" type="password" @bind-Value="_login.Password" />
        <div class="font-weight-bold text-danger">
            <ValidationMessage For="() => _login.Password" />
        </div>
    </div>
    <div class="aa-single-submit">
        <input type="submit" value="Sign in" class="aa-browse-btn">
        <p>Don't Have An Account Yet? <a href="registration">CREATE NOW!</a></p>
    </div>
</EditForm>

@code {
    private LoginRequest _login = new LoginRequest();
    private string _error;
    protected override void OnInitialized()
    {
        @if (_authState.isAuthenticated)
        {
            _navManager.NavigateTo("/account");
        }
        _appState.SetPageTitle("Sign in to your account");
    }
    private async Task LogIn()
    {
        var loggedUser = await _authService.LogIn(_login);
        if (loggedUser != null)
        {
            _navManager.NavigateTo("/account");
        }
        else
        {
            _error = "Login failed";
        }
    }
}
