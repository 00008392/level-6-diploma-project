@page "/account/password"
@using Models.User
@inherits Components.UserBaseComponent
@layout FormLayout
<EditForm OnValidSubmit="@ChangePassword" Model="_model" class="contactform">
    <DataAnnotationsValidator />
    <Error Response="_response" />
    <div class="aa-single-field">
        <label>Password <span class="required">*</span></label>
        <InputText class="form__input" type="password" @bind-Value="_model.Password" />
        <div class="font-weight-bold text-danger">
            <ValidationMessage For="() => _model.Password" />
        </div>
    </div>
    <div class="aa-single-field">
        <label for="confirm-password">Confirm Password <span class="required">*</span></label>
        <InputText class="form__input" type="password" @bind-Value="_model.ConfirmPassword" />
        <div class="font-weight-bold text-danger">
            <ValidationMessage For="() => _model.ConfirmPassword" />
        </div>
    </div>
    <div class="aa-single-submit">
        <input type="submit" value="Reset password">
    </div>
</EditForm>

@code {
    private ChangePassword _model = new ChangePassword();
    private Response _response;
    protected override async Task OnInitializedAsync()
    {
        _appState.SetPageTitle("Password modification");
        //if user is not authenticated, redirect to login page
        if(!_authState.isAuthenticated)
        {
            _navManager.NavigateTo("/login");
        } else
        {
            //if authenticated, set id to logged user id
            _model.Id = (long)(await _authService.GetLoggedUserIdAsync());
        }
    }
    private async Task ChangePassword()
    {
        //try ti change password, if success navigate to account page
        _response = await _service.ChangePasswordAsync
            (_model, () => _navManager.NavigateTo("/account"));
    }
}
